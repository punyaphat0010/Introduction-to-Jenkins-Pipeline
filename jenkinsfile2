pipeline {
    agent any

    parameters {
        booleanParam(name: 'RUN_DEPLOY', defaultValue: true, description: 'Should we deploy?')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Select deployment environment')
    }

    stages {
        stage('Build') {
            steps {
                echo 'üî® Building application...'
                sh 'echo "Compiling source code..."'
            }
        }

        stage('Test in Parallel') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        echo 'üß™ Running unit tests...'
                        sh 'sleep 5'
                    }
                }
                stage('Integration Tests') {
                    steps {
                        echo 'üîó Running integration tests...'
                        sh 'sleep 5'
                    }
                }
            }
        }

        stage('Simulated OS Testing') {
            parallel {
                stage('Linux Simulation') {
                    steps {
                        echo 'üêß Simulating test on Linux...'
                        sh 'echo "Running Linux-based tests..."'
                    }
                }
                stage('Windows Simulation') {
                    steps {
                        echo 'ü™ü Simulating test on Windows...'
                        sh 'echo "Running Windows-based tests..."'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                sh 'echo "All tests passed!" > results.txt'
                archiveArtifacts artifacts: 'results.txt', fingerprint: true
            }
        }

        stage('Approval') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    input message: "Do you want to proceed with deployment?"
                }
            }
        }

        stage('Deploy') {
            when {
                allOf {
                    expression { return params.RUN_DEPLOY }
                }
            }
            steps {
                echo "üöÄ Deploying application to environment: ${params.ENVIRONMENT}"
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline finished successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs!'
        }
        always {
            echo 'üì¶ Pipeline completed (success or failure).'
        }
    }
}
